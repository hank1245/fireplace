/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 hank_ani.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { useGameStore } from "../../store/gameStore";

export default function HankAni(props) {
  const group = useRef();
  const { scene, animations } = useGLTF("/models/hank_ani.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const [hovered, setHovered] = useState(false);
  const { openCharacterDialog, isPlayingLofiMusic } = useGameStore();

  useEffect(() => {
    if (actions && actions["Armature|mixamo.com|Layer0"]) {
      actions["Armature|mixamo.com|Layer0"].play();
    }
    return () => {
      if (actions && actions["Armature|mixamo.com|Layer0"]) {
        actions["Armature|mixamo.com|Layer0"].stop();
      }
    };
  }, [actions]);

  const getMusicOption = () => {
    if (isPlayingLofiMusic) {
      return {
        text: "노래를 꺼주세요",
        action: () => {
          // AudioSystem에서 lofimusic.wav 중지
          console.log("Dispatching stopLofiMusic event");
          window.dispatchEvent(new CustomEvent('stopLofiMusic'));
          openCharacterDialog({
            text: "음악을 꺼드렸어요. 이제 편안한 불소리와 함께 휴식을 취하세요. 다시 음악이 필요하시면 언제든 말씀해주세요.",
            options: [],
          });
        },
      };
    } else {
      return {
        text: "노래를 틀어주세요",
        action: () => {
          // AudioSystem에서 lofimusic.wav 재생
          window.dispatchEvent(new CustomEvent('playLofiMusic'));
          openCharacterDialog({
            text: "좋은 음악을 틀어드렸어요! 편안한 lofi 음악과 함께 불가를 즐기세요. 음악이 마음에 안 드시면 언제든 말씀해주세요.",
            options: [],
          });
        },
      };
    }
  };

  const handleClick = () => {
    openCharacterDialog({
      text: "안녕하세요! 저는 이 캠핑장의 주인이에요. 무엇을 도와드릴까요?",
      options: [
        {
          text: "당신에 대해 알려주세요",
          action: () => {
            openCharacterDialog({
              text: "저는 웹 개발자이자 3D 아티스트입니다. 이 평화로운 공간에서 창작 활동을 하며 지내고 있어요. 통나무에 앉아서 불을 바라보며 명상하는 걸 좋아합니다.",
              options: [
                {
                  text: "멋지네요!",
                  action: () => {
                    openCharacterDialog({
                      text: "감사합니다! 이 곳에서 편안히 쉬어가세요. 통나무에 앉아서 불소리와 음악을 들으며 휴식을 취해보세요.",
                      options: [],
                    });
                  },
                },
              ],
            });
          },
        },
        {
          text: "이 곳에 대해 알려주세요",
          action: () => {
            openCharacterDialog({
              text: "이곳은 저만의 특별한 캠핑장이에요. 통나무에 앉아서 불을 바라보며 lofi 음악을 들을 수 있고, 포트폴리오 게시판도 있어요. 공부하거나 휴식을 취하기 좋은 곳입니다.",
              options: [],
            });
          },
        },
        getMusicOption(),
      ],
    });
  };

  return (
    <group ref={group} {...props} dispose={null}>
      {/* Hover 효과를 위한 투명한 박스 */}
      <mesh
        position={[0, 0.5, 0]}
        onClick={handleClick}
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
      >
        <boxGeometry args={[1.5, 1.5, 1.5]} />
        <meshBasicMaterial transparent opacity={0} />
      </mesh>
      {/* Hover 시 나타나는 색상 표시 */}
      {hovered && (
        <mesh position={[0, 0.01, 0]} rotation={[-Math.PI / 2, 0, 0]}>
          <circleGeometry args={[0.7, 32]} />
          <meshBasicMaterial
            color="#A0522D"
            transparent
            opacity={0.5}
            side={THREE.DoubleSide}
          />
        </mesh>
      )}
      {/* 실제 Hank 애니메이션 모델 */}
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
          <skinnedMesh
            name="Wolf3D_Body"
            geometry={nodes.Wolf3D_Body.geometry}
            material={materials.Wolf3D_Body}
            skeleton={nodes.Wolf3D_Body.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Hair"
            geometry={nodes.Wolf3D_Hair.geometry}
            material={materials.Wolf3D_Hair}
            skeleton={nodes.Wolf3D_Hair.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Bottom"
            geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
            material={materials.Wolf3D_Outfit_Bottom}
            skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Footwear"
            geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
            material={materials.Wolf3D_Outfit_Footwear}
            skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
          />
          <skinnedMesh
            name="Wolf3D_Outfit_Top"
            geometry={nodes.Wolf3D_Outfit_Top.geometry}
            material={materials.Wolf3D_Outfit_Top}
            skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
          />
          <skinnedMesh
            name="EyeLeft"
            geometry={nodes.EyeLeft.geometry}
            material={materials["Wolf3D_Eye.001"]}
            skeleton={nodes.EyeLeft.skeleton}
            morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
          />
          <skinnedMesh
            name="EyeRight"
            geometry={nodes.EyeRight.geometry}
            material={materials["Wolf3D_Eye.001"]}
            skeleton={nodes.EyeRight.skeleton}
            morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
            morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
          />
          <skinnedMesh
            name="Wolf3D_Head"
            geometry={nodes.Wolf3D_Head.geometry}
            material={materials.Wolf3D_Skin}
            skeleton={nodes.Wolf3D_Head.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
            morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
          />
          <skinnedMesh
            name="Wolf3D_Teeth"
            geometry={nodes.Wolf3D_Teeth.geometry}
            material={materials["Wolf3D_Teeth.001"]}
            skeleton={nodes.Wolf3D_Teeth.skeleton}
            morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
            morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/hank_ani.glb");
